name: Android APK Builder

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug/release)'
        required: false
        default: 'debug'
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: ${{ github.event.inputs.build_type || 'debug' }}
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      GRADLE_USER_HOME: ${{ github.workspace }}/.gradle

    steps:
      # 1. Set up core system PATH first
      - name: Setup system PATH
        run: |
          # Set PATH to minimal system paths
          echo "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" >> $GITHUB_ENV
          echo "Initial PATH: $PATH"

      # 2. Install essential tools with absolute path references
      - name: Install system dependencies
        run: |
          /usr/bin/apt-get update
          /usr/bin/apt-get install -y \
            tar gzip unzip zip \
            ca-certificates \
            build-essential libncurses5-dev \
            lib32z1 lib32ncurses6 lib32stdc++6 \
            openjdk-17-jdk python3-pip python3-venv \
            git wget curl
          echo "System dependencies installed"

      # 3. Verify core tools with absolute paths
      - name: Verify system tools
        run: |
          echo "=== Core tools verification ==="
          /bin/tar --version || { echo "tar not found"; exit 127; }
          /usr/bin/unzip -v || { echo "unzip not found"; exit 127; }
          /usr/bin/wget --version || { echo "wget not found"; exit 127; }
          /usr/bin/git --version || { echo "git not found"; exit 127; }
          /usr/bin/curl --version || { echo "curl not found"; exit 127; }
          echo "Core tools verified"

      # 4. Python setup
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 5. Java setup
      - name: Configure Java
        run: |
          JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "Java version:"
          $JAVA_HOME/bin/java -version

      # 6. Android SDK installation with absolute paths
      - name: Install Android SDK
        run: |
          set -x
          # Create SDK directory
          /bin/mkdir -p "$ANDROID_SDK_ROOT"
          cd "$ANDROID_SDK_ROOT"
          
          # Download using absolute path to wget
          /usr/bin/wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          
          # Unzip using absolute path
          /usr/bin/unzip -q commandlinetools-linux-9477386_latest.zip -d cmdline-tools
          /bin/rm commandlinetools-linux-9477386_latest.zip
          
          # Make tools executable
          /bin/chmod -R +x cmdline-tools/bin
          
          # Set PATH for sdkmanager
          echo "PATH=$ANDROID_SDK_ROOT/cmdline-tools/bin:$PATH" >> $GITHUB_ENV
          
          # Verify sdkmanager exists
          if [ ! -f "$ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager" ]; then
            echo "sdkmanager not found!"
            exit 127
          fi
          
          # Accept licenses
          yes | $ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses
          
          # Install packages
          $ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;33.0.2"
            
          echo "Android SDK installed"

      # 7. Configure Android environment
      - name: Configure Android paths
        run: |
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "PATH=$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/33.0.2:$PATH" >> $GITHUB_ENV
          echo "Android environment configured"

      # 8. Install Python tools
      - name: Install Python dependencies
        run: |
          /usr/bin/python3 -m pip install --upgrade pip
          /usr/bin/python3 -m pip install buildozer cython virtualenv
          echo "Python tools installed"

      # 9. Final environment verification
      - name: Verify all tools
        run: |
          echo "=== PATH ==="
          echo $PATH
          echo "=== Core tools ==="
          /bin/tar --version
          /usr/bin/unzip -v
          /usr/bin/wget --version
          echo "=== Java ==="
          java -version
          echo "=== Android tools ==="
          $ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager --version
          $ANDROID_SDK_ROOT/platform-tools/adb version
          $ANDROID_SDK_ROOT/build-tools/33.0.2/aapt version
          echo "=== Python tools ==="
          python --version
          pip --version
          buildozer --version

      # 10. Build APK
      - name: Build APK
        run: |
          set -x
          # Initialize Buildozer
          if [ ! -f buildozer.spec ]; then
            buildozer init
          fi
          
          # Build based on type
          if [ "$BUILD_TYPE" = "release" ]; then
            buildozer -v android release
          else
            buildozer -v android debug
          fi

      # 11. Prepare APK artifact
      - name: Prepare APK artifact
        run: |
          set -x
          mkdir -p build-apk
          APK_PATH=$(find bin -name '*.apk' -print -quit)
          if [ -z "$APK_PATH" ]; then
            echo "Error: No APK found in bin directory"
            find . -name bin -type d -exec ls -lR {} \;
            exit 1
          fi
          NEW_NAME="app-$BUILD_TYPE-$GITHUB_RUN_NUMBER-$(date +'%Y%m%d').apk"
          /bin/mv "$APK_PATH" "build-apk/$NEW_NAME"
          echo "APK_NAME=$NEW_NAME" >> $GITHUB_ENV

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ env.BUILD_TYPE }}
          path: build-apk/*.apk

      - name: Create GitHub Release
        if: ${{ env.BUILD_TYPE == 'release' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Release ${{ github.run_number }}
          files: build-apk/*.apk
          generate_release_notes: true
