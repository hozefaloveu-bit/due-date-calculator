name: Android APK Builder

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug/release)'
        required: false
        default: 'debug'
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: ${{ github.event.inputs.build_type || 'debug' }}
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      GRADLE_USER_HOME: ${{ github.workspace }}/.gradle

    steps:
      # 1. System setup
      - name: Setup environment
        run: |
          echo "Initial PATH: $PATH"
          echo "Build type: $BUILD_TYPE"
          echo "Workspace: $GITHUB_WORKSPACE"
          ls -la $GITHUB_WORKSPACE
          df -h

      # 2. Install essential tools
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            tar gzip unzip zip ca-certificates \
            build-essential libncurses5-dev \
            lib32z1 lib32ncurses6 lib32stdc++6 \
            openjdk-17-jdk python3-pip python3-venv \
            git wget curl
          echo "System dependencies installed"
          
          # Verify core tools
          echo "Core tools verification:"
          tar --version
          unzip -v
          java -version
          python3 --version
          pip3 --version

      # 3. Python setup
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 4. Android SDK installation
      - name: Install Android SDK
        run: |
          set -x
          # Create SDK directory
          mkdir -p "$ANDROID_SDK_ROOT"
          cd "$ANDROID_SDK_ROOT"
          
          # Download command line tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip -d cmdline-tools
          rm commandlinetools-linux-9477386_latest.zip
          
          # Set PATH for sdkmanager
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/bin:$PATH"
          
          # Accept licenses
          yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses
          
          # Install packages
          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;33.0.2" \
            "emulator" \
            "patcher;v4"
            
          # Verify installation
          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --list
          
          # Set environment variables
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "PATH=$ANDROID_SDK_ROOT/cmdline-tools/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/33.0.2:$PATH" >> $GITHUB_ENV
          
          echo "Android SDK installed successfully"

      # 5. Python dependencies
      - name: Install Python tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install buildozer cython virtualenv
          echo "Python tools installed"
          
          # Verify Buildozer
          buildozer --version

      # 6. Build environment verification
      - name: Verify build environment
        run: |
          set -x
          echo "=== PATH ==="
          echo $PATH
          echo "=== Java ==="
          java -version
          echo "=== Android ==="
          sdkmanager --version
          adb version
          aidl --version
          aapt version
          echo "=== Python ==="
          python --version
          pip --version
          buildozer --version
          echo "=== Disk space ==="
          df -h
          echo "=== Memory ==="
          free -m

      # 7. Build APK with full logging
      - name: Build APK
        run: |
          set -x
          # Initialize Buildozer if needed
          if [ ! -f buildozer.spec ]; then
            buildozer init
          fi
          
          # Create log directory
          mkdir -p logs
          
          # Build based on type
          if [ "$BUILD_TYPE" = "release" ]; then
            buildozer -v android release 2>&1 | tee logs/build.log
          else
            buildozer -v android debug 2>&1 | tee logs/build.log
          fi
          
          # Save exit code
          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          echo "BUILD_EXIT_CODE=$BUILD_EXIT_CODE" >> $GITHUB_ENV
          
          # Upload build log regardless of result
          echo "Build finished with exit code $BUILD_EXIT_CODE"

      # 8. Post-build steps
      - name: Process APK artifact
        if: env.BUILD_EXIT_CODE == 0
        run: |
          set -x
          mkdir -p build-apk
          APK_PATH=$(find bin -name '*.apk' -print -quit)
          if [ -z "$APK_PATH" ]; then
            echo "Error: No APK found in bin directory"
            find . -name bin -type d -exec ls -lR {} \;
            exit 1
          fi
          NEW_NAME="app-$BUILD_TYPE-$GITHUB_RUN_NUMBER-$(date +'%Y%m%d').apk"
          mv "$APK_PATH" "build-apk/$NEW_NAME"
          echo "APK_NAME=$NEW_NAME" >> $GITHUB_ENV
          echo "APK prepared: $NEW_NAME"

      # 9. Upload artifacts
      - name: Upload build logs
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: logs

      - name: Upload APK artifact
        if: env.BUILD_EXIT_CODE == 0
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ env.BUILD_TYPE }}
          path: build-apk/*.apk

      # 10. Create release (only for successful release builds)
      - name: Create GitHub Release
        if: env.BUILD_EXIT_CODE == 0 && env.BUILD_TYPE == 'release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Release ${{ github.run_number }}
          files: build-apk/*.apk
          generate_release_notes: true

      # 11. Fail the build if previous steps failed
      - name: Check build success
        if: env.BUILD_EXIT_CODE != 0
        run: |
          echo "Build failed with exit code $BUILD_EXIT_CODE"
          echo "Check build logs artifact for details"
          exit $BUILD_EXIT_CODE
