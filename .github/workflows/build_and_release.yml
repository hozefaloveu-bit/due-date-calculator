name: Build APK (Debug or Release)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug/release)'
        required: false
        default: 'debug'
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: ${{ github.event.inputs.build_type || 'debug' }}
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      GRADLE_USER_HOME: ${{ github.workspace }}/.gradle

    steps:
      # 1. Core system setup with explicit PATH
      - name: Setup system PATH
        run: |
          # Set system PATH first
          echo "PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" >> $GITHUB_ENV
          echo "Initial PATH: $PATH"

      - name: Install essential system tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            tar gzip unzip zip \
            ca-certificates \
            software-properties-common \
            build-essential \
            libncurses5-dev \
            lib32z1 lib32ncurses6 lib32stdc++6
          echo "System tools installed"

      # 2. Verify core utilities exist and are executable
      - name: Verify system tools
        run: |
          echo "Verifying core utilities:"
          ls -l /bin/tar
          ls -l /usr/bin/tar
          /bin/tar --version || /usr/bin/tar --version || exit 1
          echo "PATH contains: $(echo $PATH | tr ':' '\n')"

      # 3. Python setup
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 4. Java installation
      - name: Install Java 17
        run: |
          sudo apt-get install -y openjdk-17-jdk
          JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "Java installed"

      # 5. Android SDK installation
      - name: Install Android SDK
        run: |
          set -ex
          # Create SDK directories
          mkdir -p "$ANDROID_SDK_ROOT"
          
          # Download command line tools
          cd /tmp
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip -d cmdline-tools
          
          # Move to correct location
          mv cmdline-tools "$ANDROID_SDK_ROOT/cmdline-tools"
          
          # Make tools executable
          chmod -R +x "$ANDROID_SDK_ROOT/cmdline-tools/bin"
          
          # Update PATH
          echo "PATH=$ANDROID_SDK_ROOT/cmdline-tools/bin:$PATH" >> $GITHUB_ENV
          
          # Accept licenses
          yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses
          
          # Install Android packages
          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;33.0.2"
          
          echo "Android SDK installed"

      # 6. Configure Android environment
      - name: Configure Android paths
        run: |
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "PATH=$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/33.0.2:$PATH" >> $GITHUB_ENV
          echo "Android paths configured"

      # 7. Python dependencies
      - name: Install Python tools
        run: |
          python -m pip install --user --upgrade pip
          python -m pip install --user buildozer cython virtualenv
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "Python tools installed"

      # 8. Final environment verification
      - name: Verify all tools
        run: |
          echo "=== System PATH ==="
          echo $PATH
          echo "=== Core tools ==="
          which tar && tar --version
          which unzip && unzip -v
          echo "=== Java ==="
          which java && java -version
          echo "=== Android tools ==="
          which sdkmanager && sdkmanager --version
          which adb && adb version
          which aapt && aapt version
          echo "=== Python tools ==="
          which python && python --version
          which pip && pip --version
          which buildozer && buildozer --version

      # 9. Build process
      - name: Build APK
        run: |
          set -ex
          # Initialize Buildozer if needed
          if [ ! -f buildozer.spec ]; then
            buildozer init
          fi
          
          # Build based on type
          if [ "$BUILD_TYPE" = "release" ]; then
            buildozer -v android release
          else
            buildozer -v android debug
          fi

      # 10. Artifact handling
      - name: Prepare APK artifact
        run: |
          set -ex
          mkdir -p build-apk
          APK_PATH=$(find bin -name '*.apk' -print -quit)
          if [ -z "$APK_PATH" ]; then
            echo "Error: No APK found in bin directory"
            find . -name bin -type d -exec ls -lR {} \;
            exit 1
          fi
          NEW_NAME="app-$BUILD_TYPE-$GITHUB_RUN_NUMBER-$(date +'%Y%m%d').apk"
          mv "$APK_PATH" "build-apk/$NEW_NAME"
          echo "APK_NAME=$NEW_NAME" >> $GITHUB_ENV

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ env.BUILD_TYPE }}
          path: build-apk/*.apk

      - name: Create GitHub Release
        if: ${{ env.BUILD_TYPE == 'release' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Release ${{ github.run_number }}
          files: build-apk/*.apk
          generate_release_notes: true
